/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogViewerRouteImport } from './routes/log-viewer'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as MainTreeRouteRouteImport } from './routes/_main/tree/route'
import { Route as MainIssuesRouteRouteImport } from './routes/_main/issues/route'
import { Route as MainHardwareRouteRouteImport } from './routes/_main/hardware/route'
import { Route as MainTreeIndexRouteImport } from './routes/_main/tree/index'
import { Route as MainIssuesIndexRouteImport } from './routes/_main/issues/index'
import { Route as MainHardwareIndexRouteImport } from './routes/_main/hardware/index'
import { Route as MainTreeTreeIdRouteRouteImport } from './routes/_main/tree/$treeId/route'
import { Route as MainTestTestIdRouteRouteImport } from './routes/_main/test/$testId/route'
import { Route as MainIssueIssueIdRouteRouteImport } from './routes/_main/issue/$issueId/route'
import { Route as MainHardwareHardwareIdRouteRouteImport } from './routes/_main/hardware/$hardwareId/route'
import { Route as MainBuildBuildIdRouteRouteImport } from './routes/_main/build/$buildId/route'
import { Route as MainTreeTreeIdIndexRouteImport } from './routes/_main/tree/$treeId/index'
import { Route as MainTestTestIdIndexRouteImport } from './routes/_main/test/$testId/index'
import { Route as MainIssueIssueIdIndexRouteImport } from './routes/_main/issue/$issueId/index'
import { Route as MainHardwareHardwareIdIndexRouteImport } from './routes/_main/hardware/$hardwareId/index'
import { Route as MainBuildBuildIdIndexRouteImport } from './routes/_main/build/$buildId/index'
import { Route as MainalternativesIIndexRouteImport } from './routes/_main/(alternatives)/i/index'
import { Route as MainalternativesTTestIdRouteRouteImport } from './routes/_main/(alternatives)/t/$testId/route'
import { Route as MainalternativesIIssueIdRouteRouteImport } from './routes/_main/(alternatives)/i/$issueId/route'
import { Route as MainalternativesBBuildIdRouteRouteImport } from './routes/_main/(alternatives)/b/$buildId/route'
import { Route as MainTreeTreeNameBranchIndexRouteImport } from './routes/_main/tree/$treeName/$branch/index'
import { Route as MainHardwareHardwareIdTestIndexRouteImport } from './routes/_main/hardware/$hardwareId/test/index'
import { Route as MainHardwareHardwareIdBuildIndexRouteImport } from './routes/_main/hardware/$hardwareId/build/index'
import { Route as MainHardwareHardwareIdBootIndexRouteImport } from './routes/_main/hardware/$hardwareId/boot/index'
import { Route as MainCheckoutTreeNameBranchIndexRouteImport } from './routes/_main/checkout/$treeName/$branch/index'
import { Route as MainalternativesTTestIdIndexRouteImport } from './routes/_main/(alternatives)/t/$testId/index'
import { Route as MainalternativesIIssueIdIndexRouteImport } from './routes/_main/(alternatives)/i/$issueId/index'
import { Route as MainalternativesBBuildIdIndexRouteImport } from './routes/_main/(alternatives)/b/$buildId/index'
import { Route as MainTreeTreeNameBranchHashRouteRouteImport } from './routes/_main/tree/$treeName/$branch/$hash/route'
import { Route as MainTreeTreeNameBranchHashIndexRouteImport } from './routes/_main/tree/$treeName/$branch/$hash/index'
import { Route as MainTreeTreeIdTestTestIdIndexRouteImport } from './routes/_main/tree/$treeId/test/$testId/index'
import { Route as MainTreeTreeIdBuildBuildIdIndexRouteImport } from './routes/_main/tree/$treeId/build/$buildId/index'
import { Route as MainHardwareHardwareIdTestTestIdIndexRouteImport } from './routes/_main/hardware/$hardwareId/test/$testId/index'
import { Route as MainHardwareHardwareIdBuildBuildIdIndexRouteImport } from './routes/_main/hardware/$hardwareId/build/$buildId/index'
import { Route as MainHardwareHardwareIdBootBootIdIndexRouteImport } from './routes/_main/hardware/$hardwareId/boot/$bootId/index'
import { Route as MainCheckoutTreeNameBranchHashIndexRouteImport } from './routes/_main/checkout/$treeName/$branch/$hash/index'
import { Route as MainalternativesCTreeNameBranchIndexRouteImport } from './routes/_main/(alternatives)/c/$treeName/$branch/index'
import { Route as MainalternativesCTreeNameBranchHashIndexRouteImport } from './routes/_main/(alternatives)/c/$treeName/$branch/$hash/index'

const LogViewerRoute = LogViewerRouteImport.update({
  id: '/log-viewer',
  path: '/log-viewer',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainTreeRouteRoute = MainTreeRouteRouteImport.update({
  id: '/tree',
  path: '/tree',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainIssuesRouteRoute = MainIssuesRouteRouteImport.update({
  id: '/issues',
  path: '/issues',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainHardwareRouteRoute = MainHardwareRouteRouteImport.update({
  id: '/hardware',
  path: '/hardware',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainTreeIndexRoute = MainTreeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainTreeRouteRoute,
} as any)
const MainIssuesIndexRoute = MainIssuesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainIssuesRouteRoute,
} as any)
const MainHardwareIndexRoute = MainHardwareIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainHardwareRouteRoute,
} as any)
const MainTreeTreeIdRouteRoute = MainTreeTreeIdRouteRouteImport.update({
  id: '/$treeId',
  path: '/$treeId',
  getParentRoute: () => MainTreeRouteRoute,
} as any)
const MainTestTestIdRouteRoute = MainTestTestIdRouteRouteImport.update({
  id: '/test/$testId',
  path: '/test/$testId',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainIssueIssueIdRouteRoute = MainIssueIssueIdRouteRouteImport.update({
  id: '/issue/$issueId',
  path: '/issue/$issueId',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainHardwareHardwareIdRouteRoute =
  MainHardwareHardwareIdRouteRouteImport.update({
    id: '/$hardwareId',
    path: '/$hardwareId',
    getParentRoute: () => MainHardwareRouteRoute,
  } as any)
const MainBuildBuildIdRouteRoute = MainBuildBuildIdRouteRouteImport.update({
  id: '/build/$buildId',
  path: '/build/$buildId',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainTreeTreeIdIndexRoute = MainTreeTreeIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainTreeTreeIdRouteRoute,
} as any)
const MainTestTestIdIndexRoute = MainTestTestIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainTestTestIdRouteRoute,
} as any)
const MainIssueIssueIdIndexRoute = MainIssueIssueIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainIssueIssueIdRouteRoute,
} as any)
const MainHardwareHardwareIdIndexRoute =
  MainHardwareHardwareIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainBuildBuildIdIndexRoute = MainBuildBuildIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainBuildBuildIdRouteRoute,
} as any)
const MainalternativesIIndexRoute = MainalternativesIIndexRouteImport.update({
  id: '/(alternatives)/i/',
  path: '/i/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainalternativesTTestIdRouteRoute =
  MainalternativesTTestIdRouteRouteImport.update({
    id: '/(alternatives)/t/$testId',
    path: '/t/$testId',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainalternativesIIssueIdRouteRoute =
  MainalternativesIIssueIdRouteRouteImport.update({
    id: '/(alternatives)/i/$issueId',
    path: '/i/$issueId',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainalternativesBBuildIdRouteRoute =
  MainalternativesBBuildIdRouteRouteImport.update({
    id: '/(alternatives)/b/$buildId',
    path: '/b/$buildId',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainTreeTreeNameBranchIndexRoute =
  MainTreeTreeNameBranchIndexRouteImport.update({
    id: '/$treeName/$branch/',
    path: '/$treeName/$branch/',
    getParentRoute: () => MainTreeRouteRoute,
  } as any)
const MainHardwareHardwareIdTestIndexRoute =
  MainHardwareHardwareIdTestIndexRouteImport.update({
    id: '/test/',
    path: '/test/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainHardwareHardwareIdBuildIndexRoute =
  MainHardwareHardwareIdBuildIndexRouteImport.update({
    id: '/build/',
    path: '/build/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainHardwareHardwareIdBootIndexRoute =
  MainHardwareHardwareIdBootIndexRouteImport.update({
    id: '/boot/',
    path: '/boot/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainCheckoutTreeNameBranchIndexRoute =
  MainCheckoutTreeNameBranchIndexRouteImport.update({
    id: '/checkout/$treeName/$branch/',
    path: '/checkout/$treeName/$branch/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainalternativesTTestIdIndexRoute =
  MainalternativesTTestIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainalternativesTTestIdRouteRoute,
  } as any)
const MainalternativesIIssueIdIndexRoute =
  MainalternativesIIssueIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainalternativesIIssueIdRouteRoute,
  } as any)
const MainalternativesBBuildIdIndexRoute =
  MainalternativesBBuildIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainalternativesBBuildIdRouteRoute,
  } as any)
const MainTreeTreeNameBranchHashRouteRoute =
  MainTreeTreeNameBranchHashRouteRouteImport.update({
    id: '/$treeName/$branch/$hash',
    path: '/$treeName/$branch/$hash',
    getParentRoute: () => MainTreeRouteRoute,
  } as any)
const MainTreeTreeNameBranchHashIndexRoute =
  MainTreeTreeNameBranchHashIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainTreeTreeNameBranchHashRouteRoute,
  } as any)
const MainTreeTreeIdTestTestIdIndexRoute =
  MainTreeTreeIdTestTestIdIndexRouteImport.update({
    id: '/test/$testId/',
    path: '/test/$testId/',
    getParentRoute: () => MainTreeTreeIdRouteRoute,
  } as any)
const MainTreeTreeIdBuildBuildIdIndexRoute =
  MainTreeTreeIdBuildBuildIdIndexRouteImport.update({
    id: '/build/$buildId/',
    path: '/build/$buildId/',
    getParentRoute: () => MainTreeTreeIdRouteRoute,
  } as any)
const MainHardwareHardwareIdTestTestIdIndexRoute =
  MainHardwareHardwareIdTestTestIdIndexRouteImport.update({
    id: '/test/$testId/',
    path: '/test/$testId/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainHardwareHardwareIdBuildBuildIdIndexRoute =
  MainHardwareHardwareIdBuildBuildIdIndexRouteImport.update({
    id: '/build/$buildId/',
    path: '/build/$buildId/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainHardwareHardwareIdBootBootIdIndexRoute =
  MainHardwareHardwareIdBootBootIdIndexRouteImport.update({
    id: '/boot/$bootId/',
    path: '/boot/$bootId/',
    getParentRoute: () => MainHardwareHardwareIdRouteRoute,
  } as any)
const MainCheckoutTreeNameBranchHashIndexRoute =
  MainCheckoutTreeNameBranchHashIndexRouteImport.update({
    id: '/checkout/$treeName/$branch/$hash/',
    path: '/checkout/$treeName/$branch/$hash/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainalternativesCTreeNameBranchIndexRoute =
  MainalternativesCTreeNameBranchIndexRouteImport.update({
    id: '/(alternatives)/c/$treeName/$branch/',
    path: '/c/$treeName/$branch/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainalternativesCTreeNameBranchHashIndexRoute =
  MainalternativesCTreeNameBranchHashIndexRouteImport.update({
    id: '/(alternatives)/c/$treeName/$branch/$hash/',
    path: '/c/$treeName/$branch/$hash/',
    getParentRoute: () => MainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/log-viewer': typeof LogViewerRoute
  '/hardware': typeof MainHardwareRouteRouteWithChildren
  '/issues': typeof MainIssuesRouteRouteWithChildren
  '/tree': typeof MainTreeRouteRouteWithChildren
  '/': typeof MainIndexRoute
  '/build/$buildId': typeof MainBuildBuildIdRouteRouteWithChildren
  '/hardware/$hardwareId': typeof MainHardwareHardwareIdRouteRouteWithChildren
  '/issue/$issueId': typeof MainIssueIssueIdRouteRouteWithChildren
  '/test/$testId': typeof MainTestTestIdRouteRouteWithChildren
  '/tree/$treeId': typeof MainTreeTreeIdRouteRouteWithChildren
  '/hardware/': typeof MainHardwareIndexRoute
  '/issues/': typeof MainIssuesIndexRoute
  '/tree/': typeof MainTreeIndexRoute
  '/b/$buildId': typeof MainalternativesBBuildIdRouteRouteWithChildren
  '/i/$issueId': typeof MainalternativesIIssueIdRouteRouteWithChildren
  '/t/$testId': typeof MainalternativesTTestIdRouteRouteWithChildren
  '/i': typeof MainalternativesIIndexRoute
  '/build/$buildId/': typeof MainBuildBuildIdIndexRoute
  '/hardware/$hardwareId/': typeof MainHardwareHardwareIdIndexRoute
  '/issue/$issueId/': typeof MainIssueIssueIdIndexRoute
  '/test/$testId/': typeof MainTestTestIdIndexRoute
  '/tree/$treeId/': typeof MainTreeTreeIdIndexRoute
  '/tree/$treeName/$branch/$hash': typeof MainTreeTreeNameBranchHashRouteRouteWithChildren
  '/b/$buildId/': typeof MainalternativesBBuildIdIndexRoute
  '/i/$issueId/': typeof MainalternativesIIssueIdIndexRoute
  '/t/$testId/': typeof MainalternativesTTestIdIndexRoute
  '/checkout/$treeName/$branch': typeof MainCheckoutTreeNameBranchIndexRoute
  '/hardware/$hardwareId/boot': typeof MainHardwareHardwareIdBootIndexRoute
  '/hardware/$hardwareId/build': typeof MainHardwareHardwareIdBuildIndexRoute
  '/hardware/$hardwareId/test': typeof MainHardwareHardwareIdTestIndexRoute
  '/tree/$treeName/$branch': typeof MainTreeTreeNameBranchIndexRoute
  '/c/$treeName/$branch': typeof MainalternativesCTreeNameBranchIndexRoute
  '/checkout/$treeName/$branch/$hash': typeof MainCheckoutTreeNameBranchHashIndexRoute
  '/hardware/$hardwareId/boot/$bootId': typeof MainHardwareHardwareIdBootBootIdIndexRoute
  '/hardware/$hardwareId/build/$buildId': typeof MainHardwareHardwareIdBuildBuildIdIndexRoute
  '/hardware/$hardwareId/test/$testId': typeof MainHardwareHardwareIdTestTestIdIndexRoute
  '/tree/$treeId/build/$buildId': typeof MainTreeTreeIdBuildBuildIdIndexRoute
  '/tree/$treeId/test/$testId': typeof MainTreeTreeIdTestTestIdIndexRoute
  '/tree/$treeName/$branch/$hash/': typeof MainTreeTreeNameBranchHashIndexRoute
  '/c/$treeName/$branch/$hash': typeof MainalternativesCTreeNameBranchHashIndexRoute
}
export interface FileRoutesByTo {
  '/log-viewer': typeof LogViewerRoute
  '/': typeof MainIndexRoute
  '/hardware': typeof MainHardwareIndexRoute
  '/issues': typeof MainIssuesIndexRoute
  '/tree': typeof MainTreeIndexRoute
  '/i': typeof MainalternativesIIndexRoute
  '/build/$buildId': typeof MainBuildBuildIdIndexRoute
  '/hardware/$hardwareId': typeof MainHardwareHardwareIdIndexRoute
  '/issue/$issueId': typeof MainIssueIssueIdIndexRoute
  '/test/$testId': typeof MainTestTestIdIndexRoute
  '/tree/$treeId': typeof MainTreeTreeIdIndexRoute
  '/b/$buildId': typeof MainalternativesBBuildIdIndexRoute
  '/i/$issueId': typeof MainalternativesIIssueIdIndexRoute
  '/t/$testId': typeof MainalternativesTTestIdIndexRoute
  '/checkout/$treeName/$branch': typeof MainCheckoutTreeNameBranchIndexRoute
  '/hardware/$hardwareId/boot': typeof MainHardwareHardwareIdBootIndexRoute
  '/hardware/$hardwareId/build': typeof MainHardwareHardwareIdBuildIndexRoute
  '/hardware/$hardwareId/test': typeof MainHardwareHardwareIdTestIndexRoute
  '/tree/$treeName/$branch': typeof MainTreeTreeNameBranchIndexRoute
  '/c/$treeName/$branch': typeof MainalternativesCTreeNameBranchIndexRoute
  '/checkout/$treeName/$branch/$hash': typeof MainCheckoutTreeNameBranchHashIndexRoute
  '/hardware/$hardwareId/boot/$bootId': typeof MainHardwareHardwareIdBootBootIdIndexRoute
  '/hardware/$hardwareId/build/$buildId': typeof MainHardwareHardwareIdBuildBuildIdIndexRoute
  '/hardware/$hardwareId/test/$testId': typeof MainHardwareHardwareIdTestTestIdIndexRoute
  '/tree/$treeId/build/$buildId': typeof MainTreeTreeIdBuildBuildIdIndexRoute
  '/tree/$treeId/test/$testId': typeof MainTreeTreeIdTestTestIdIndexRoute
  '/tree/$treeName/$branch/$hash': typeof MainTreeTreeNameBranchHashIndexRoute
  '/c/$treeName/$branch/$hash': typeof MainalternativesCTreeNameBranchHashIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/log-viewer': typeof LogViewerRoute
  '/_main/hardware': typeof MainHardwareRouteRouteWithChildren
  '/_main/issues': typeof MainIssuesRouteRouteWithChildren
  '/_main/tree': typeof MainTreeRouteRouteWithChildren
  '/_main/': typeof MainIndexRoute
  '/_main/build/$buildId': typeof MainBuildBuildIdRouteRouteWithChildren
  '/_main/hardware/$hardwareId': typeof MainHardwareHardwareIdRouteRouteWithChildren
  '/_main/issue/$issueId': typeof MainIssueIssueIdRouteRouteWithChildren
  '/_main/test/$testId': typeof MainTestTestIdRouteRouteWithChildren
  '/_main/tree/$treeId': typeof MainTreeTreeIdRouteRouteWithChildren
  '/_main/hardware/': typeof MainHardwareIndexRoute
  '/_main/issues/': typeof MainIssuesIndexRoute
  '/_main/tree/': typeof MainTreeIndexRoute
  '/_main/(alternatives)/b/$buildId': typeof MainalternativesBBuildIdRouteRouteWithChildren
  '/_main/(alternatives)/i/$issueId': typeof MainalternativesIIssueIdRouteRouteWithChildren
  '/_main/(alternatives)/t/$testId': typeof MainalternativesTTestIdRouteRouteWithChildren
  '/_main/(alternatives)/i/': typeof MainalternativesIIndexRoute
  '/_main/build/$buildId/': typeof MainBuildBuildIdIndexRoute
  '/_main/hardware/$hardwareId/': typeof MainHardwareHardwareIdIndexRoute
  '/_main/issue/$issueId/': typeof MainIssueIssueIdIndexRoute
  '/_main/test/$testId/': typeof MainTestTestIdIndexRoute
  '/_main/tree/$treeId/': typeof MainTreeTreeIdIndexRoute
  '/_main/tree/$treeName/$branch/$hash': typeof MainTreeTreeNameBranchHashRouteRouteWithChildren
  '/_main/(alternatives)/b/$buildId/': typeof MainalternativesBBuildIdIndexRoute
  '/_main/(alternatives)/i/$issueId/': typeof MainalternativesIIssueIdIndexRoute
  '/_main/(alternatives)/t/$testId/': typeof MainalternativesTTestIdIndexRoute
  '/_main/checkout/$treeName/$branch/': typeof MainCheckoutTreeNameBranchIndexRoute
  '/_main/hardware/$hardwareId/boot/': typeof MainHardwareHardwareIdBootIndexRoute
  '/_main/hardware/$hardwareId/build/': typeof MainHardwareHardwareIdBuildIndexRoute
  '/_main/hardware/$hardwareId/test/': typeof MainHardwareHardwareIdTestIndexRoute
  '/_main/tree/$treeName/$branch/': typeof MainTreeTreeNameBranchIndexRoute
  '/_main/(alternatives)/c/$treeName/$branch/': typeof MainalternativesCTreeNameBranchIndexRoute
  '/_main/checkout/$treeName/$branch/$hash/': typeof MainCheckoutTreeNameBranchHashIndexRoute
  '/_main/hardware/$hardwareId/boot/$bootId/': typeof MainHardwareHardwareIdBootBootIdIndexRoute
  '/_main/hardware/$hardwareId/build/$buildId/': typeof MainHardwareHardwareIdBuildBuildIdIndexRoute
  '/_main/hardware/$hardwareId/test/$testId/': typeof MainHardwareHardwareIdTestTestIdIndexRoute
  '/_main/tree/$treeId/build/$buildId/': typeof MainTreeTreeIdBuildBuildIdIndexRoute
  '/_main/tree/$treeId/test/$testId/': typeof MainTreeTreeIdTestTestIdIndexRoute
  '/_main/tree/$treeName/$branch/$hash/': typeof MainTreeTreeNameBranchHashIndexRoute
  '/_main/(alternatives)/c/$treeName/$branch/$hash/': typeof MainalternativesCTreeNameBranchHashIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/log-viewer'
    | '/hardware'
    | '/issues'
    | '/tree'
    | '/'
    | '/build/$buildId'
    | '/hardware/$hardwareId'
    | '/issue/$issueId'
    | '/test/$testId'
    | '/tree/$treeId'
    | '/hardware/'
    | '/issues/'
    | '/tree/'
    | '/b/$buildId'
    | '/i/$issueId'
    | '/t/$testId'
    | '/i'
    | '/build/$buildId/'
    | '/hardware/$hardwareId/'
    | '/issue/$issueId/'
    | '/test/$testId/'
    | '/tree/$treeId/'
    | '/tree/$treeName/$branch/$hash'
    | '/b/$buildId/'
    | '/i/$issueId/'
    | '/t/$testId/'
    | '/checkout/$treeName/$branch'
    | '/hardware/$hardwareId/boot'
    | '/hardware/$hardwareId/build'
    | '/hardware/$hardwareId/test'
    | '/tree/$treeName/$branch'
    | '/c/$treeName/$branch'
    | '/checkout/$treeName/$branch/$hash'
    | '/hardware/$hardwareId/boot/$bootId'
    | '/hardware/$hardwareId/build/$buildId'
    | '/hardware/$hardwareId/test/$testId'
    | '/tree/$treeId/build/$buildId'
    | '/tree/$treeId/test/$testId'
    | '/tree/$treeName/$branch/$hash/'
    | '/c/$treeName/$branch/$hash'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/log-viewer'
    | '/'
    | '/hardware'
    | '/issues'
    | '/tree'
    | '/i'
    | '/build/$buildId'
    | '/hardware/$hardwareId'
    | '/issue/$issueId'
    | '/test/$testId'
    | '/tree/$treeId'
    | '/b/$buildId'
    | '/i/$issueId'
    | '/t/$testId'
    | '/checkout/$treeName/$branch'
    | '/hardware/$hardwareId/boot'
    | '/hardware/$hardwareId/build'
    | '/hardware/$hardwareId/test'
    | '/tree/$treeName/$branch'
    | '/c/$treeName/$branch'
    | '/checkout/$treeName/$branch/$hash'
    | '/hardware/$hardwareId/boot/$bootId'
    | '/hardware/$hardwareId/build/$buildId'
    | '/hardware/$hardwareId/test/$testId'
    | '/tree/$treeId/build/$buildId'
    | '/tree/$treeId/test/$testId'
    | '/tree/$treeName/$branch/$hash'
    | '/c/$treeName/$branch/$hash'
  id:
    | '__root__'
    | '/_main'
    | '/log-viewer'
    | '/_main/hardware'
    | '/_main/issues'
    | '/_main/tree'
    | '/_main/'
    | '/_main/build/$buildId'
    | '/_main/hardware/$hardwareId'
    | '/_main/issue/$issueId'
    | '/_main/test/$testId'
    | '/_main/tree/$treeId'
    | '/_main/hardware/'
    | '/_main/issues/'
    | '/_main/tree/'
    | '/_main/(alternatives)/b/$buildId'
    | '/_main/(alternatives)/i/$issueId'
    | '/_main/(alternatives)/t/$testId'
    | '/_main/(alternatives)/i/'
    | '/_main/build/$buildId/'
    | '/_main/hardware/$hardwareId/'
    | '/_main/issue/$issueId/'
    | '/_main/test/$testId/'
    | '/_main/tree/$treeId/'
    | '/_main/tree/$treeName/$branch/$hash'
    | '/_main/(alternatives)/b/$buildId/'
    | '/_main/(alternatives)/i/$issueId/'
    | '/_main/(alternatives)/t/$testId/'
    | '/_main/checkout/$treeName/$branch/'
    | '/_main/hardware/$hardwareId/boot/'
    | '/_main/hardware/$hardwareId/build/'
    | '/_main/hardware/$hardwareId/test/'
    | '/_main/tree/$treeName/$branch/'
    | '/_main/(alternatives)/c/$treeName/$branch/'
    | '/_main/checkout/$treeName/$branch/$hash/'
    | '/_main/hardware/$hardwareId/boot/$bootId/'
    | '/_main/hardware/$hardwareId/build/$buildId/'
    | '/_main/hardware/$hardwareId/test/$testId/'
    | '/_main/tree/$treeId/build/$buildId/'
    | '/_main/tree/$treeId/test/$testId/'
    | '/_main/tree/$treeName/$branch/$hash/'
    | '/_main/(alternatives)/c/$treeName/$branch/$hash/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  LogViewerRoute: typeof LogViewerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/log-viewer': {
      id: '/log-viewer'
      path: '/log-viewer'
      fullPath: '/log-viewer'
      preLoaderRoute: typeof LogViewerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/tree': {
      id: '/_main/tree'
      path: '/tree'
      fullPath: '/tree'
      preLoaderRoute: typeof MainTreeRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/issues': {
      id: '/_main/issues'
      path: '/issues'
      fullPath: '/issues'
      preLoaderRoute: typeof MainIssuesRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/hardware': {
      id: '/_main/hardware'
      path: '/hardware'
      fullPath: '/hardware'
      preLoaderRoute: typeof MainHardwareRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/tree/': {
      id: '/_main/tree/'
      path: '/'
      fullPath: '/tree/'
      preLoaderRoute: typeof MainTreeIndexRouteImport
      parentRoute: typeof MainTreeRouteRoute
    }
    '/_main/issues/': {
      id: '/_main/issues/'
      path: '/'
      fullPath: '/issues/'
      preLoaderRoute: typeof MainIssuesIndexRouteImport
      parentRoute: typeof MainIssuesRouteRoute
    }
    '/_main/hardware/': {
      id: '/_main/hardware/'
      path: '/'
      fullPath: '/hardware/'
      preLoaderRoute: typeof MainHardwareIndexRouteImport
      parentRoute: typeof MainHardwareRouteRoute
    }
    '/_main/tree/$treeId': {
      id: '/_main/tree/$treeId'
      path: '/$treeId'
      fullPath: '/tree/$treeId'
      preLoaderRoute: typeof MainTreeTreeIdRouteRouteImport
      parentRoute: typeof MainTreeRouteRoute
    }
    '/_main/test/$testId': {
      id: '/_main/test/$testId'
      path: '/test/$testId'
      fullPath: '/test/$testId'
      preLoaderRoute: typeof MainTestTestIdRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/issue/$issueId': {
      id: '/_main/issue/$issueId'
      path: '/issue/$issueId'
      fullPath: '/issue/$issueId'
      preLoaderRoute: typeof MainIssueIssueIdRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/hardware/$hardwareId': {
      id: '/_main/hardware/$hardwareId'
      path: '/$hardwareId'
      fullPath: '/hardware/$hardwareId'
      preLoaderRoute: typeof MainHardwareHardwareIdRouteRouteImport
      parentRoute: typeof MainHardwareRouteRoute
    }
    '/_main/build/$buildId': {
      id: '/_main/build/$buildId'
      path: '/build/$buildId'
      fullPath: '/build/$buildId'
      preLoaderRoute: typeof MainBuildBuildIdRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/tree/$treeId/': {
      id: '/_main/tree/$treeId/'
      path: '/'
      fullPath: '/tree/$treeId/'
      preLoaderRoute: typeof MainTreeTreeIdIndexRouteImport
      parentRoute: typeof MainTreeTreeIdRouteRoute
    }
    '/_main/test/$testId/': {
      id: '/_main/test/$testId/'
      path: '/'
      fullPath: '/test/$testId/'
      preLoaderRoute: typeof MainTestTestIdIndexRouteImport
      parentRoute: typeof MainTestTestIdRouteRoute
    }
    '/_main/issue/$issueId/': {
      id: '/_main/issue/$issueId/'
      path: '/'
      fullPath: '/issue/$issueId/'
      preLoaderRoute: typeof MainIssueIssueIdIndexRouteImport
      parentRoute: typeof MainIssueIssueIdRouteRoute
    }
    '/_main/hardware/$hardwareId/': {
      id: '/_main/hardware/$hardwareId/'
      path: '/'
      fullPath: '/hardware/$hardwareId/'
      preLoaderRoute: typeof MainHardwareHardwareIdIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/build/$buildId/': {
      id: '/_main/build/$buildId/'
      path: '/'
      fullPath: '/build/$buildId/'
      preLoaderRoute: typeof MainBuildBuildIdIndexRouteImport
      parentRoute: typeof MainBuildBuildIdRouteRoute
    }
    '/_main/(alternatives)/i/': {
      id: '/_main/(alternatives)/i/'
      path: '/i'
      fullPath: '/i'
      preLoaderRoute: typeof MainalternativesIIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/(alternatives)/t/$testId': {
      id: '/_main/(alternatives)/t/$testId'
      path: '/t/$testId'
      fullPath: '/t/$testId'
      preLoaderRoute: typeof MainalternativesTTestIdRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/(alternatives)/i/$issueId': {
      id: '/_main/(alternatives)/i/$issueId'
      path: '/i/$issueId'
      fullPath: '/i/$issueId'
      preLoaderRoute: typeof MainalternativesIIssueIdRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/(alternatives)/b/$buildId': {
      id: '/_main/(alternatives)/b/$buildId'
      path: '/b/$buildId'
      fullPath: '/b/$buildId'
      preLoaderRoute: typeof MainalternativesBBuildIdRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/tree/$treeName/$branch/': {
      id: '/_main/tree/$treeName/$branch/'
      path: '/$treeName/$branch'
      fullPath: '/tree/$treeName/$branch'
      preLoaderRoute: typeof MainTreeTreeNameBranchIndexRouteImport
      parentRoute: typeof MainTreeRouteRoute
    }
    '/_main/hardware/$hardwareId/test/': {
      id: '/_main/hardware/$hardwareId/test/'
      path: '/test'
      fullPath: '/hardware/$hardwareId/test'
      preLoaderRoute: typeof MainHardwareHardwareIdTestIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/hardware/$hardwareId/build/': {
      id: '/_main/hardware/$hardwareId/build/'
      path: '/build'
      fullPath: '/hardware/$hardwareId/build'
      preLoaderRoute: typeof MainHardwareHardwareIdBuildIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/hardware/$hardwareId/boot/': {
      id: '/_main/hardware/$hardwareId/boot/'
      path: '/boot'
      fullPath: '/hardware/$hardwareId/boot'
      preLoaderRoute: typeof MainHardwareHardwareIdBootIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/checkout/$treeName/$branch/': {
      id: '/_main/checkout/$treeName/$branch/'
      path: '/checkout/$treeName/$branch'
      fullPath: '/checkout/$treeName/$branch'
      preLoaderRoute: typeof MainCheckoutTreeNameBranchIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/(alternatives)/t/$testId/': {
      id: '/_main/(alternatives)/t/$testId/'
      path: '/'
      fullPath: '/t/$testId/'
      preLoaderRoute: typeof MainalternativesTTestIdIndexRouteImport
      parentRoute: typeof MainalternativesTTestIdRouteRoute
    }
    '/_main/(alternatives)/i/$issueId/': {
      id: '/_main/(alternatives)/i/$issueId/'
      path: '/'
      fullPath: '/i/$issueId/'
      preLoaderRoute: typeof MainalternativesIIssueIdIndexRouteImport
      parentRoute: typeof MainalternativesIIssueIdRouteRoute
    }
    '/_main/(alternatives)/b/$buildId/': {
      id: '/_main/(alternatives)/b/$buildId/'
      path: '/'
      fullPath: '/b/$buildId/'
      preLoaderRoute: typeof MainalternativesBBuildIdIndexRouteImport
      parentRoute: typeof MainalternativesBBuildIdRouteRoute
    }
    '/_main/tree/$treeName/$branch/$hash': {
      id: '/_main/tree/$treeName/$branch/$hash'
      path: '/$treeName/$branch/$hash'
      fullPath: '/tree/$treeName/$branch/$hash'
      preLoaderRoute: typeof MainTreeTreeNameBranchHashRouteRouteImport
      parentRoute: typeof MainTreeRouteRoute
    }
    '/_main/tree/$treeName/$branch/$hash/': {
      id: '/_main/tree/$treeName/$branch/$hash/'
      path: '/'
      fullPath: '/tree/$treeName/$branch/$hash/'
      preLoaderRoute: typeof MainTreeTreeNameBranchHashIndexRouteImport
      parentRoute: typeof MainTreeTreeNameBranchHashRouteRoute
    }
    '/_main/tree/$treeId/test/$testId/': {
      id: '/_main/tree/$treeId/test/$testId/'
      path: '/test/$testId'
      fullPath: '/tree/$treeId/test/$testId'
      preLoaderRoute: typeof MainTreeTreeIdTestTestIdIndexRouteImport
      parentRoute: typeof MainTreeTreeIdRouteRoute
    }
    '/_main/tree/$treeId/build/$buildId/': {
      id: '/_main/tree/$treeId/build/$buildId/'
      path: '/build/$buildId'
      fullPath: '/tree/$treeId/build/$buildId'
      preLoaderRoute: typeof MainTreeTreeIdBuildBuildIdIndexRouteImport
      parentRoute: typeof MainTreeTreeIdRouteRoute
    }
    '/_main/hardware/$hardwareId/test/$testId/': {
      id: '/_main/hardware/$hardwareId/test/$testId/'
      path: '/test/$testId'
      fullPath: '/hardware/$hardwareId/test/$testId'
      preLoaderRoute: typeof MainHardwareHardwareIdTestTestIdIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/hardware/$hardwareId/build/$buildId/': {
      id: '/_main/hardware/$hardwareId/build/$buildId/'
      path: '/build/$buildId'
      fullPath: '/hardware/$hardwareId/build/$buildId'
      preLoaderRoute: typeof MainHardwareHardwareIdBuildBuildIdIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/hardware/$hardwareId/boot/$bootId/': {
      id: '/_main/hardware/$hardwareId/boot/$bootId/'
      path: '/boot/$bootId'
      fullPath: '/hardware/$hardwareId/boot/$bootId'
      preLoaderRoute: typeof MainHardwareHardwareIdBootBootIdIndexRouteImport
      parentRoute: typeof MainHardwareHardwareIdRouteRoute
    }
    '/_main/checkout/$treeName/$branch/$hash/': {
      id: '/_main/checkout/$treeName/$branch/$hash/'
      path: '/checkout/$treeName/$branch/$hash'
      fullPath: '/checkout/$treeName/$branch/$hash'
      preLoaderRoute: typeof MainCheckoutTreeNameBranchHashIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/(alternatives)/c/$treeName/$branch/': {
      id: '/_main/(alternatives)/c/$treeName/$branch/'
      path: '/c/$treeName/$branch'
      fullPath: '/c/$treeName/$branch'
      preLoaderRoute: typeof MainalternativesCTreeNameBranchIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/(alternatives)/c/$treeName/$branch/$hash/': {
      id: '/_main/(alternatives)/c/$treeName/$branch/$hash/'
      path: '/c/$treeName/$branch/$hash'
      fullPath: '/c/$treeName/$branch/$hash'
      preLoaderRoute: typeof MainalternativesCTreeNameBranchHashIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
  }
}

interface MainHardwareHardwareIdRouteRouteChildren {
  MainHardwareHardwareIdIndexRoute: typeof MainHardwareHardwareIdIndexRoute
  MainHardwareHardwareIdBootIndexRoute: typeof MainHardwareHardwareIdBootIndexRoute
  MainHardwareHardwareIdBuildIndexRoute: typeof MainHardwareHardwareIdBuildIndexRoute
  MainHardwareHardwareIdTestIndexRoute: typeof MainHardwareHardwareIdTestIndexRoute
  MainHardwareHardwareIdBootBootIdIndexRoute: typeof MainHardwareHardwareIdBootBootIdIndexRoute
  MainHardwareHardwareIdBuildBuildIdIndexRoute: typeof MainHardwareHardwareIdBuildBuildIdIndexRoute
  MainHardwareHardwareIdTestTestIdIndexRoute: typeof MainHardwareHardwareIdTestTestIdIndexRoute
}

const MainHardwareHardwareIdRouteRouteChildren: MainHardwareHardwareIdRouteRouteChildren =
  {
    MainHardwareHardwareIdIndexRoute: MainHardwareHardwareIdIndexRoute,
    MainHardwareHardwareIdBootIndexRoute: MainHardwareHardwareIdBootIndexRoute,
    MainHardwareHardwareIdBuildIndexRoute:
      MainHardwareHardwareIdBuildIndexRoute,
    MainHardwareHardwareIdTestIndexRoute: MainHardwareHardwareIdTestIndexRoute,
    MainHardwareHardwareIdBootBootIdIndexRoute:
      MainHardwareHardwareIdBootBootIdIndexRoute,
    MainHardwareHardwareIdBuildBuildIdIndexRoute:
      MainHardwareHardwareIdBuildBuildIdIndexRoute,
    MainHardwareHardwareIdTestTestIdIndexRoute:
      MainHardwareHardwareIdTestTestIdIndexRoute,
  }

const MainHardwareHardwareIdRouteRouteWithChildren =
  MainHardwareHardwareIdRouteRoute._addFileChildren(
    MainHardwareHardwareIdRouteRouteChildren,
  )

interface MainHardwareRouteRouteChildren {
  MainHardwareHardwareIdRouteRoute: typeof MainHardwareHardwareIdRouteRouteWithChildren
  MainHardwareIndexRoute: typeof MainHardwareIndexRoute
}

const MainHardwareRouteRouteChildren: MainHardwareRouteRouteChildren = {
  MainHardwareHardwareIdRouteRoute:
    MainHardwareHardwareIdRouteRouteWithChildren,
  MainHardwareIndexRoute: MainHardwareIndexRoute,
}

const MainHardwareRouteRouteWithChildren =
  MainHardwareRouteRoute._addFileChildren(MainHardwareRouteRouteChildren)

interface MainIssuesRouteRouteChildren {
  MainIssuesIndexRoute: typeof MainIssuesIndexRoute
}

const MainIssuesRouteRouteChildren: MainIssuesRouteRouteChildren = {
  MainIssuesIndexRoute: MainIssuesIndexRoute,
}

const MainIssuesRouteRouteWithChildren = MainIssuesRouteRoute._addFileChildren(
  MainIssuesRouteRouteChildren,
)

interface MainTreeTreeIdRouteRouteChildren {
  MainTreeTreeIdIndexRoute: typeof MainTreeTreeIdIndexRoute
  MainTreeTreeIdBuildBuildIdIndexRoute: typeof MainTreeTreeIdBuildBuildIdIndexRoute
  MainTreeTreeIdTestTestIdIndexRoute: typeof MainTreeTreeIdTestTestIdIndexRoute
}

const MainTreeTreeIdRouteRouteChildren: MainTreeTreeIdRouteRouteChildren = {
  MainTreeTreeIdIndexRoute: MainTreeTreeIdIndexRoute,
  MainTreeTreeIdBuildBuildIdIndexRoute: MainTreeTreeIdBuildBuildIdIndexRoute,
  MainTreeTreeIdTestTestIdIndexRoute: MainTreeTreeIdTestTestIdIndexRoute,
}

const MainTreeTreeIdRouteRouteWithChildren =
  MainTreeTreeIdRouteRoute._addFileChildren(MainTreeTreeIdRouteRouteChildren)

interface MainTreeTreeNameBranchHashRouteRouteChildren {
  MainTreeTreeNameBranchHashIndexRoute: typeof MainTreeTreeNameBranchHashIndexRoute
}

const MainTreeTreeNameBranchHashRouteRouteChildren: MainTreeTreeNameBranchHashRouteRouteChildren =
  {
    MainTreeTreeNameBranchHashIndexRoute: MainTreeTreeNameBranchHashIndexRoute,
  }

const MainTreeTreeNameBranchHashRouteRouteWithChildren =
  MainTreeTreeNameBranchHashRouteRoute._addFileChildren(
    MainTreeTreeNameBranchHashRouteRouteChildren,
  )

interface MainTreeRouteRouteChildren {
  MainTreeTreeIdRouteRoute: typeof MainTreeTreeIdRouteRouteWithChildren
  MainTreeIndexRoute: typeof MainTreeIndexRoute
  MainTreeTreeNameBranchHashRouteRoute: typeof MainTreeTreeNameBranchHashRouteRouteWithChildren
  MainTreeTreeNameBranchIndexRoute: typeof MainTreeTreeNameBranchIndexRoute
}

const MainTreeRouteRouteChildren: MainTreeRouteRouteChildren = {
  MainTreeTreeIdRouteRoute: MainTreeTreeIdRouteRouteWithChildren,
  MainTreeIndexRoute: MainTreeIndexRoute,
  MainTreeTreeNameBranchHashRouteRoute:
    MainTreeTreeNameBranchHashRouteRouteWithChildren,
  MainTreeTreeNameBranchIndexRoute: MainTreeTreeNameBranchIndexRoute,
}

const MainTreeRouteRouteWithChildren = MainTreeRouteRoute._addFileChildren(
  MainTreeRouteRouteChildren,
)

interface MainBuildBuildIdRouteRouteChildren {
  MainBuildBuildIdIndexRoute: typeof MainBuildBuildIdIndexRoute
}

const MainBuildBuildIdRouteRouteChildren: MainBuildBuildIdRouteRouteChildren = {
  MainBuildBuildIdIndexRoute: MainBuildBuildIdIndexRoute,
}

const MainBuildBuildIdRouteRouteWithChildren =
  MainBuildBuildIdRouteRoute._addFileChildren(
    MainBuildBuildIdRouteRouteChildren,
  )

interface MainIssueIssueIdRouteRouteChildren {
  MainIssueIssueIdIndexRoute: typeof MainIssueIssueIdIndexRoute
}

const MainIssueIssueIdRouteRouteChildren: MainIssueIssueIdRouteRouteChildren = {
  MainIssueIssueIdIndexRoute: MainIssueIssueIdIndexRoute,
}

const MainIssueIssueIdRouteRouteWithChildren =
  MainIssueIssueIdRouteRoute._addFileChildren(
    MainIssueIssueIdRouteRouteChildren,
  )

interface MainTestTestIdRouteRouteChildren {
  MainTestTestIdIndexRoute: typeof MainTestTestIdIndexRoute
}

const MainTestTestIdRouteRouteChildren: MainTestTestIdRouteRouteChildren = {
  MainTestTestIdIndexRoute: MainTestTestIdIndexRoute,
}

const MainTestTestIdRouteRouteWithChildren =
  MainTestTestIdRouteRoute._addFileChildren(MainTestTestIdRouteRouteChildren)

interface MainalternativesBBuildIdRouteRouteChildren {
  MainalternativesBBuildIdIndexRoute: typeof MainalternativesBBuildIdIndexRoute
}

const MainalternativesBBuildIdRouteRouteChildren: MainalternativesBBuildIdRouteRouteChildren =
  {
    MainalternativesBBuildIdIndexRoute: MainalternativesBBuildIdIndexRoute,
  }

const MainalternativesBBuildIdRouteRouteWithChildren =
  MainalternativesBBuildIdRouteRoute._addFileChildren(
    MainalternativesBBuildIdRouteRouteChildren,
  )

interface MainalternativesIIssueIdRouteRouteChildren {
  MainalternativesIIssueIdIndexRoute: typeof MainalternativesIIssueIdIndexRoute
}

const MainalternativesIIssueIdRouteRouteChildren: MainalternativesIIssueIdRouteRouteChildren =
  {
    MainalternativesIIssueIdIndexRoute: MainalternativesIIssueIdIndexRoute,
  }

const MainalternativesIIssueIdRouteRouteWithChildren =
  MainalternativesIIssueIdRouteRoute._addFileChildren(
    MainalternativesIIssueIdRouteRouteChildren,
  )

interface MainalternativesTTestIdRouteRouteChildren {
  MainalternativesTTestIdIndexRoute: typeof MainalternativesTTestIdIndexRoute
}

const MainalternativesTTestIdRouteRouteChildren: MainalternativesTTestIdRouteRouteChildren =
  {
    MainalternativesTTestIdIndexRoute: MainalternativesTTestIdIndexRoute,
  }

const MainalternativesTTestIdRouteRouteWithChildren =
  MainalternativesTTestIdRouteRoute._addFileChildren(
    MainalternativesTTestIdRouteRouteChildren,
  )

interface MainRouteRouteChildren {
  MainHardwareRouteRoute: typeof MainHardwareRouteRouteWithChildren
  MainIssuesRouteRoute: typeof MainIssuesRouteRouteWithChildren
  MainTreeRouteRoute: typeof MainTreeRouteRouteWithChildren
  MainIndexRoute: typeof MainIndexRoute
  MainBuildBuildIdRouteRoute: typeof MainBuildBuildIdRouteRouteWithChildren
  MainIssueIssueIdRouteRoute: typeof MainIssueIssueIdRouteRouteWithChildren
  MainTestTestIdRouteRoute: typeof MainTestTestIdRouteRouteWithChildren
  MainalternativesBBuildIdRouteRoute: typeof MainalternativesBBuildIdRouteRouteWithChildren
  MainalternativesIIssueIdRouteRoute: typeof MainalternativesIIssueIdRouteRouteWithChildren
  MainalternativesTTestIdRouteRoute: typeof MainalternativesTTestIdRouteRouteWithChildren
  MainalternativesIIndexRoute: typeof MainalternativesIIndexRoute
  MainCheckoutTreeNameBranchIndexRoute: typeof MainCheckoutTreeNameBranchIndexRoute
  MainalternativesCTreeNameBranchIndexRoute: typeof MainalternativesCTreeNameBranchIndexRoute
  MainCheckoutTreeNameBranchHashIndexRoute: typeof MainCheckoutTreeNameBranchHashIndexRoute
  MainalternativesCTreeNameBranchHashIndexRoute: typeof MainalternativesCTreeNameBranchHashIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainHardwareRouteRoute: MainHardwareRouteRouteWithChildren,
  MainIssuesRouteRoute: MainIssuesRouteRouteWithChildren,
  MainTreeRouteRoute: MainTreeRouteRouteWithChildren,
  MainIndexRoute: MainIndexRoute,
  MainBuildBuildIdRouteRoute: MainBuildBuildIdRouteRouteWithChildren,
  MainIssueIssueIdRouteRoute: MainIssueIssueIdRouteRouteWithChildren,
  MainTestTestIdRouteRoute: MainTestTestIdRouteRouteWithChildren,
  MainalternativesBBuildIdRouteRoute:
    MainalternativesBBuildIdRouteRouteWithChildren,
  MainalternativesIIssueIdRouteRoute:
    MainalternativesIIssueIdRouteRouteWithChildren,
  MainalternativesTTestIdRouteRoute:
    MainalternativesTTestIdRouteRouteWithChildren,
  MainalternativesIIndexRoute: MainalternativesIIndexRoute,
  MainCheckoutTreeNameBranchIndexRoute: MainCheckoutTreeNameBranchIndexRoute,
  MainalternativesCTreeNameBranchIndexRoute:
    MainalternativesCTreeNameBranchIndexRoute,
  MainCheckoutTreeNameBranchHashIndexRoute:
    MainCheckoutTreeNameBranchHashIndexRoute,
  MainalternativesCTreeNameBranchHashIndexRoute:
    MainalternativesCTreeNameBranchHashIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  LogViewerRoute: LogViewerRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
